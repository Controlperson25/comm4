'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { ENV_URLS } from '@/constants/routes'

interface ConnectionTest {
  step: string
  status: 'pending' | 'success' | 'error'
  message: string
  timestamp?: string
}

export function WebSocketTest() {
  const [tests, setTests] = useState<ConnectionTest[]>([])
  const [ws, setWs] = useState<WebSocket | null>(null)
  const [isConnected, setIsConnected] = useState(false)
  const [receivedMessages, setReceivedMessages] = useState<any[]>([])
  const [connectionInfo, setConnectionInfo] = useState({
    wsUrl: '',
    readyState: WebSocket.CLOSED,
    protocol: '',
    extensions: ''
  })
  
  const addTest = (step: string, status: 'pending' | 'success' | 'error', message: string) => {
    setTests(prev => [...prev, {
      step,
      status,
      message,
      timestamp: new Date().toLocaleTimeString()
    }])
  }

  const clearTests = () => {
    setTests([])
    setReceivedMessages([])
  }

  const updateConnectionInfo = (websocket: WebSocket | null) => {
    if (!websocket) {
      setConnectionInfo({
        wsUrl: '',
        readyState: WebSocket.CLOSED,
        protocol: '',
        extensions: ''
      })
      return
    }

    setConnectionInfo({
      wsUrl: websocket.url,
      readyState: websocket.readyState,
      protocol: websocket.protocol,
      extensions: websocket.extensions
    })
  }

  const getReadyStateText = (state: number) => {
    switch (state) {
      case WebSocket.CONNECTING: return 'CONNECTING (0)'
      case WebSocket.OPEN: return 'OPEN (1)'
      case WebSocket.CLOSING: return 'CLOSING (2)'
      case WebSocket.CLOSED: return 'CLOSED (3)'
      default: return `UNKNOWN (${state})`
    }
  }

  const testBasicConnection = async () => {
    clearTests()
    
    // Test 1: Environment check
    addTest('Environment', 'pending', '–ü—Ä–æ–≤–µ—Ä—è–µ–º environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...')
    
    const wsUrl = ENV_URLS.WS_URL + '/ws'
    addTest('Environment', 'success', `WS URL: ${wsUrl}`)
    
    if (!wsUrl.startsWith('ws://') && !wsUrl.startsWith('wss://')) {
      addTest('Environment', 'error', 'WebSocket URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ws:// –∏–ª–∏ wss://')
      return
    }

    // Test 2: Create connection
    addTest('Connection', 'pending', '–°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...')
    
    try {
      const websocket = new WebSocket(wsUrl)
      setWs(websocket)
      updateConnectionInfo(websocket)

      let connectionTimeout: NodeJS.Timeout

      websocket.onopen = () => {
        clearTimeout(connectionTimeout)
        setIsConnected(true)
        updateConnectionInfo(websocket)
        addTest('Connection', 'success', 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
        
        // Send initial handshake
        addTest('Handshake', 'pending', '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ...')
        
        websocket.send(JSON.stringify({
          type: 'ping',
          timestamp: new Date().toISOString(),
          clientId: 'debug-client',
          data: { message: 'Hello from debug client' }
        }))
        
        addTest('Handshake', 'success', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      }

      websocket.onmessage = (event) => {
        addTest('Message', 'success', '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
        
        try {
          const message = JSON.parse(event.data)
          setReceivedMessages(prev => [...prev, {
            ...message,
            receivedAt: new Date().toISOString(),
            raw: event.data
          }])
        } catch (error) {
          setReceivedMessages(prev => [...prev, {
            raw: event.data,
            receivedAt: new Date().toISOString(),
            parseError: true,
            error: error instanceof Error ? error.message : 'Parse error'
          }])
        }
      }

      websocket.onclose = (event) => {
        clearTimeout(connectionTimeout)
        setIsConnected(false)
        updateConnectionInfo(websocket)
        
        const reason = event.reason || 'No reason provided'
        const wasClean = event.wasClean ? 'Clean' : 'Unclean'
        
        addTest('Connection', 'error', 
          `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–æ–¥ ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: "${reason}", —Ç–∏–ø: ${wasClean}`)
      }

      websocket.onerror = (error) => {
        clearTimeout(connectionTimeout)
        setIsConnected(false)
        updateConnectionInfo(websocket)
        addTest('Connection', 'error', 'WebSocket –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
        console.error('WebSocket error:', error)
      }

      // Timeout for connection
      connectionTimeout = setTimeout(() => {
        if (websocket.readyState === WebSocket.CONNECTING) {
          websocket.close()
          addTest('Connection', 'error', 'Timeout: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (10 —Å–µ–∫—É–Ω–¥)')
        }
      }, 10000)

    } catch (error) {
      addTest('Connection', 'error', 
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket: ${error instanceof Error ? error.message : 'Unknown error'}`)
    }
  }

  const testServerPing = () => {
    if (!ws || !isConnected) {
      addTest('Ping', 'error', 'WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    addTest('Ping', 'pending', '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping...')
    
    const pingMessage = {
      type: 'ping',
      timestamp: new Date().toISOString(),
      id: `ping-${Date.now()}`
    }
    
    try {
      ws.send(JSON.stringify(pingMessage))
      addTest('Ping', 'success', 'Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    } catch (error) {
      addTest('Ping', 'error', 
        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping: ${error instanceof Error ? error.message : 'Unknown error'}`)
    }
  }

  const testRoomFlow = () => {
    if (!ws || !isConnected) {
      addTest('Room Flow', 'error', 'WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    addTest('Room Flow', 'pending', '–¢–µ—Å—Ç–∏—Ä—É–µ–º flow —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã...')
    
    // Step 1: Join room
    const joinMessage = {
      type: 'join_room',
      roomId: 'debug-room-123',
      userId: 'debug-user-456',
      username: 'DebugUser',
      timestamp: new Date().toISOString()
    }
    
    ws.send(JSON.stringify(joinMessage))
    addTest('Room Flow', 'success', '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    
    // Step 2: Send chat message after delay
    setTimeout(() => {
      const chatMessage = {
        type: 'message',
        roomId: 'debug-room-123',
        userId: 'debug-user-456',
        username: 'DebugUser',
        data: {
          content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ debug',
          type: 'text'
        },
        timestamp: new Date().toISOString()
      }
      
      ws.send(JSON.stringify(chatMessage))
      addTest('Room Flow', 'success', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    }, 1000)
    
    // Step 3: Test typing indicator
    setTimeout(() => {
      const typingMessage = {
        type: 'typing',
        roomId: 'debug-room-123',
        userId: 'debug-user-456',
        username: 'DebugUser',
        data: { isTyping: true },
        timestamp: new Date().toISOString()
      }
      
      ws.send(JSON.stringify(typingMessage))
      addTest('Room Flow', 'success', '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
      
      // Stop typing after 2 seconds
      setTimeout(() => {
        const stopTypingMessage = {
          ...typingMessage,
          data: { isTyping: false }
        }
        ws.send(JSON.stringify(stopTypingMessage))
      }, 2000)
    }, 2000)
  }

  const disconnectWebSocket = () => {
    if (ws) {
      ws.close(1000, 'Manual disconnect from debug')
      setWs(null)
      setIsConnected(false)
      addTest('Disconnect', 'success', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é')
    }
  }

  // Auto-cleanup on unmount
  useEffect(() => {
    return () => {
      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.close()
      }
    }
  }, [ws])

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'success':
        return <Badge className="bg-green-100 text-green-800 border-green-300">‚úÖ –£—Å–ø–µ—Ö</Badge>
      case 'error':
        return <Badge variant="destructive">‚ùå –û—à–∏–±–∫–∞</Badge>
      case 'pending':
        return <Badge variant="secondary">‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ</Badge>
      default:
        return <Badge variant="outline">‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>
    }
  }

  return (
    <div className="space-y-6">
      {/* Connection Status Card */}
      <Card>
        <CardHeader>
          <CardTitle>üîå WebSocket Connection Status</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium mb-2">–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</h4>
              <div className="space-y-1 text-sm">
                <div>–°—Ç–∞—Ç—É—Å: {isConnected ? 
                  <span className="text-green-600 font-medium">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ</span> : 
                  <span className="text-red-600 font-medium">‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ</span>
                }</div>
                <div>Ready State: <code>{getReadyStateText(connectionInfo.readyState)}</code></div>
                <div>URL: <code className="break-all">{connectionInfo.wsUrl || 'N/A'}</code></div>
              </div>
            </div>
            <div>
              <h4 className="font-medium mb-2">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</h4>
              <div className="space-y-1 text-sm">
                <div>Env WS_URL: <code className="break-all">{ENV_URLS.WS_URL}</code></div>
                <div>Full URL: <code className="break-all">{ENV_URLS.WS_URL}/ws</code></div>
                <div>Protocol: <code>{connectionInfo.protocol || 'N/A'}</code></div>
              </div>
            </div>
          </div>
          
          {/* Control Buttons */}
          <div className="flex flex-wrap gap-2 pt-2 border-t">
            <Button onClick={testBasicConnection} disabled={isConnected} variant="default">
              üîç –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            </Button>
            <Button onClick={testServerPing} disabled={!isConnected} variant="outline">
              üì° Ping —Å–µ—Ä–≤–µ—Ä–∞
            </Button>
            <Button onClick={testRoomFlow} disabled={!isConnected} variant="outline">
              üè† –¢–µ—Å—Ç –∫–æ–º–Ω–∞—Ç—ã
            </Button>
            <Button onClick={disconnectWebSocket} disabled={!isConnected} variant="outline">
              üîå –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
            </Button>
            <Button onClick={clearTests} variant="ghost">
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Test Results */}
      {tests.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {tests.map((test, index) => (
                <div key={index} className="flex items-start justify-between p-3 border rounded-lg bg-gray-50">
                  <div className="flex-1 min-w-0">
                    <div className="font-medium text-sm">{test.step}</div>
                    <div className="text-sm text-muted-foreground break-words">{test.message}</div>
                    {test.timestamp && (
                      <div className="text-xs text-muted-foreground mt-1">{test.timestamp}</div>
                    )}
                  </div>
                  <div className="ml-2 flex-shrink-0">{getStatusBadge(test.status)}</div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Received Messages */}
      {receivedMessages.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>üì® –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({receivedMessages.length})</CardTitle>
          </CardHeader>
          <CardContent>
            <div className