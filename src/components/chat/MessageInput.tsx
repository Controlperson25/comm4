'use client'

import { useEffect, useRef } from 'react'
import { Avatar } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Skeleton } from '@/components/ui/skeleton'
import { formatDistanceToNow } from 'date-fns'
import { ru } from 'date-fns/locale'
import { useChatSelectors } from '@/store/chatStore'
import { useUserSelectors } from '@/store/userStore'

interface Message {
  id: string
  content: string
  senderId: string
  senderName: string
  timestamp: string
  type: 'text' | 'image' | 'system'
}

interface MessageListProps {
  messages?: Message[]
  currentUserId: string
  loading?: boolean
}

interface MessageItemProps {
  message: Message
  isOwn: boolean
  showAvatar?: boolean
  isConsecutive?: boolean
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function MessageSkeleton() {
  return (
    <div className="flex gap-3 p-4 animate-pulse">
      <div className="w-8 h-8 bg-gray-200 rounded-full flex-shrink-0" />
      <div className="flex-1 space-y-2">
        <div className="h-4 bg-gray-200 rounded w-1/4" />
        <div className="h-4 bg-gray-200 rounded w-3/4" />
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function SystemMessage({ message }: { message: Message }) {
  return (
    <div className="flex justify-center py-2">
      <div className="bg-gray-100 rounded-full px-3 py-1 text-xs text-gray-600">
        {message.content}
      </div>
    </div>
  )
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
function MessageItem({ message, isOwn, showAvatar = true, isConsecutive = false }: MessageItemProps) {
  const timeAgo = formatDistanceToNow(new Date(message.timestamp), {
    addSuffix: true,
    locale: ru
  })
  
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (message.type === 'system') {
    return <SystemMessage message={message} />
  }
  
  return (
    <div className={`flex gap-3 ${isOwn ? 'flex-row-reverse' : 'flex-row'} ${isConsecutive ? 'mt-1' : 'mt-4'}`}>
      {/* –ê–≤–∞—Ç–∞—Ä */}
      <div className={`flex-shrink-0 ${showAvatar && !isConsecutive ? 'visible' : 'invisible'}`}>
        <Avatar className="w-8 h-8">
          <div className="w-full h-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center text-white text-sm font-medium">
            {message.senderName.charAt(0).toUpperCase()}
          </div>
        </Avatar>
      </div>
      
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
      <div className={`flex flex-col max-w-[70%] ${isOwn ? 'items-end' : 'items-start'}`}>
        {/* –ò–º—è –∏ –≤—Ä–µ–º—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) */}
        {!isConsecutive && (
          <div className={`flex items-center gap-2 mb-1 ${isOwn ? 'flex-row-reverse' : 'flex-row'}`}>
            <span className="text-sm font-medium text-gray-900">
              {isOwn ? '–í—ã' : message.senderName}
            </span>
            <span className="text-xs text-gray-500">
              {timeAgo}
            </span>
          </div>
        )}
        
        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <div
          className={`rounded-2xl px-4 py-2 max-w-full break-words ${
            isOwn
              ? 'bg-blue-500 text-white rounded-br-md'
              : 'bg-gray-100 text-gray-900 rounded-bl-md'
          } ${isConsecutive ? 'rounded-t-md' : ''}`}
        >
          {message.type === 'text' ? (
            <p className="text-sm whitespace-pre-wrap">{message.content}</p>
          ) : message.type === 'image' ? (
            <div className="text-sm">
              üì∑ {message.content}
            </div>
          ) : (
            <p className="text-sm whitespace-pre-wrap">{message.content}</p>
          )}
        </div>
        
        {/* –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) */}
        {isOwn && !isConsecutive && (
          <div className="flex items-center gap-1 mt-1">
            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
            <span className="text-xs text-gray-500">
              {message.id.startsWith('temp_') ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'}
            </span>
          </div>
        )}
      </div>
    </div>
  )
}

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
function TypingIndicator() {
  const typingUsers = useChatSelectors.typingUsers()
  
  if (typingUsers.length === 0) return null
  
  const names = typingUsers.map(user => user.username)
  const text = names.length === 1 
    ? `${names[0]} –ø–µ—á–∞—Ç–∞–µ—Ç...`
    : names.length === 2
    ? `${names[0]} –∏ ${names[1]} –ø–µ—á–∞—Ç–∞—é—Ç...`
    : `${names.slice(0, -1).join(', ')} –∏ ${names[names.length - 1]} –ø–µ—á–∞—Ç–∞—é—Ç...`
  
  return (
    <div className="flex gap-3 mt-4">
      <Avatar className="w-8 h-8 flex-shrink-0">
        <div className="w-full h-full bg-gray-300 flex items-center justify-center">
          <span className="text-xs">...</span>
        </div>
      </Avatar>
      
      <div className="bg-gray-100 rounded-2xl rounded-bl-md px-4 py-2">
        <div className="flex items-center gap-2">
          <div className="flex gap-1">
            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
          </div>
          <span className="text-xs text-gray-600">{text}</span>
        </div>
      </div>
    </div>
  )
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
export function MessageList({ messages: propMessages, currentUserId, loading = false }: MessageListProps) {
  const messagesEndRef = useRef<HTMLDivElement>(null)
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ store –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ props
  const storeMessages = useChatSelectors.messages()
  const messages = propMessages || storeMessages
  
  const isConnected = useChatSelectors.isConnected()
  const hasMoreMessages = useChatSelectors.hasMoreMessages()
  
  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ 
        behavior: 'smooth',
        block: 'end'
      })
    }
  }, [messages])
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö
  const groupedMessages = messages.reduce((groups: Array<{
    message: Message
    isOwn: boolean
    showAvatar: boolean
    isConsecutive: boolean
  }>, message, index) => {
    const isOwn = message.senderId === currentUserId
    const prevMessage = messages[index - 1]
    const isConsecutive = prevMessage && 
      prevMessage.senderId === message.senderId && 
      prevMessage.type !== 'system' && 
      message.type !== 'system' &&
      new Date(message.timestamp).getTime() - new Date(prevMessage.timestamp).getTime() < 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
    
    groups.push({
      message,
      isOwn,
      showAvatar: true,
      isConsecutive: !!isConsecutive
    })
    
    return groups
  }, [])
  
  return (
    <div className="flex-1 overflow-y-auto">
      <div className="p-4 space-y-1">
        {loading && messages.length === 0 ? (
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
          <>
            <MessageSkeleton />
            <MessageSkeleton />
            <MessageSkeleton />
          </>
        ) : messages.length === 0 ? (
          // –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          <div className="flex items-center justify-center h-full min-h-[300px] text-gray-500">
            <div className="text-center">
              <div className="text-4xl mb-2">üí¨</div>
              <p className="text-sm">–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
              <p className="text-xs mt-1">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º!</p>
            </div>
          </div>
        ) : (
          // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
          <>
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–µ—Å—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è" */}
            {hasMoreMessages && (
              <div className="flex justify-center py-4">
                <Badge variant="outline" className="text-xs">
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                </Badge>
              </div>
            )}
            
            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            {groupedMessages.map(({ message, isOwn, showAvatar, isConsecutive }) => (
              <MessageItem
                key={message.id}
                message={message}
                isOwn={isOwn}
                showAvatar={showAvatar}
                isConsecutive={isConsecutive}
              />
            ))}
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è */}
            <TypingIndicator />
          </>
        )}
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        {!isConnected && !loading && (
          <div className="flex justify-center py-4">
            <Badge variant="destructive" className="text-xs">
              –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            </Badge>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>
    </div>
  )
}